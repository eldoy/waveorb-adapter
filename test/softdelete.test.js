const connection = require('../index.js')
let db

describe('Softdelete', () => {
  beforeAll(async () => db = await connection({ softdelete: true }))
  beforeEach(async () => await db.drop())

  it('should get deleted docs with the deleted modifier', async () => {
    const created = await db('project').create({ name: 'hello' })
    const deleted = await db('project').delete()
    expect(deleted.n).toEqual(1)
    let project = await db('project').get()
    expect(project).toBeNull()
    project = await db('project', { softdelete: false }).get()
    expect(project._id).toBeDefined()
    expect(project.deleted).toBe(true)
    expect(project.deleted_at instanceof Date).toBe(true)
  })

  it('should update deleted docs with the deleted modifier', async () => {
    const created = await db('project').create({ name: 'hello' })
    const deleted = await db('project').delete()
    expect(deleted.n).toEqual(1)
    let update = await db('project').update({ _id: created._id }, { name: 'bye' })
    expect(update.n).toEqual(0)
    let project = await db('project', { softdelete: false }).get()
    expect(project.name).toBe('hello')
    update = await db('project', { softdelete: false }).update({ _id: created._id }, { name: 'bye' })
    expect(update.n).toEqual(1)
    project = await db('project').get()
    expect(project).toEqual(null)
    project = await db('project', { softdelete: false }).get()
    expect(project._id).toBeDefined()
    expect(project.name).toBe('bye')
    expect(project.deleted).toBe(true)
    expect(project.deleted_at instanceof Date).toBe(true)
  })

  it('should really delete deleted docs with deleted modifier', async () => {
    const created = await db('project').create({ name: 'hello' })
    let deleted = await db('project').delete()
    expect(deleted.n).toEqual(1)
    let project = await db('project').get()
    expect(project).toBeNull()
    project = await db('project', { softdelete: false }).get()
    expect(project._id).toBeDefined()
    expect(project.deleted).toBe(true)
    expect(project.deleted_at instanceof Date).toBe(true)
    deleted = await db('project', { softdelete: false }).delete()
    expect(deleted.n).toEqual(1)
    project = await db('project', { softdelete: false }).get()
    expect(project).toEqual(null)
  })

  it('should find deleted docs with deleted modifier', async () => {
    const created = await db('project').create({ name: 'hello' })
    const deleted = await db('project').delete()
    expect(deleted.n).toEqual(1)
    let projects = await db('project').find()
    expect(projects).toEqual([])
    projects = await db('project', { softdelete: false }).find()
    expect(projects[0]._id).toBeDefined()
    expect(projects[0].deleted).toBe(true)
    expect(projects[0].deleted_at instanceof Date).toBe(true)
  })

  it('should count deleted docs with deleted modifier', async () => {
    const created = await db('project').create({ name: 'hello' })
    const deleted = await db('project').delete()
    expect(deleted.n).toEqual(1)
    let count = await db('project').count()
    expect(count).toEqual(0)
    count = await db('project', { softdelete: false }).count()
    expect(count).toEqual(1)
  })
})
